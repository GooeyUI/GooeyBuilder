# Generated by CMake

if("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" LESS 2.8)
   message(FATAL_ERROR "CMake >= 2.8.0 required")
endif()
if(CMAKE_VERSION VERSION_LESS "2.8.3")
   message(FATAL_ERROR "CMake >= 2.8.3 required")
endif()
cmake_policy(PUSH)
cmake_policy(VERSION 2.8.3...3.26)
#----------------------------------------------------------------
# Generated CMake target import file.
#----------------------------------------------------------------

# Commands may need to know the format version.
set(CMAKE_IMPORT_FILE_VERSION 1)

if(CMAKE_VERSION VERSION_LESS 3.0.0)
  message(FATAL_ERROR "This file relies on consumers using CMake 3.0.0 or greater.")
endif()

# Protect against multiple inclusion, which would fail when already imported targets are added once more.
set(_cmake_targets_defined "")
set(_cmake_targets_not_defined "")
set(_cmake_expected_targets "")
foreach(_cmake_expected_target IN ITEMS core core_shared core_static)
  list(APPEND _cmake_expected_targets "${_cmake_expected_target}")
  if(TARGET "${_cmake_expected_target}")
    list(APPEND _cmake_targets_defined "${_cmake_expected_target}")
  else()
    list(APPEND _cmake_targets_not_defined "${_cmake_expected_target}")
  endif()
endforeach()
unset(_cmake_expected_target)
if(_cmake_targets_defined STREQUAL _cmake_expected_targets)
  unset(_cmake_targets_defined)
  unset(_cmake_targets_not_defined)
  unset(_cmake_expected_targets)
  unset(CMAKE_IMPORT_FILE_VERSION)
  cmake_policy(POP)
  return()
endif()
if(NOT _cmake_targets_defined STREQUAL "")
  string(REPLACE ";" ", " _cmake_targets_defined_text "${_cmake_targets_defined}")
  string(REPLACE ";" ", " _cmake_targets_not_defined_text "${_cmake_targets_not_defined}")
  message(FATAL_ERROR "Some (but not all) targets in this export set were already defined.\nTargets Defined: ${_cmake_targets_defined_text}\nTargets not yet defined: ${_cmake_targets_not_defined_text}\n")
endif()
unset(_cmake_targets_defined)
unset(_cmake_targets_not_defined)
unset(_cmake_expected_targets)


# Create imported target core
add_library(core INTERFACE IMPORTED)

set_target_properties(core PROPERTIES
  INTERFACE_COMPILE_FEATURES "cxx_std_11"
  INTERFACE_INCLUDE_DIRECTORIES "/home/yassine-ahmed-ali/Documents/GooeyBuilder/third_party/webview/core/include"
  INTERFACE_LINK_LIBRARIES "PkgConfig::WEBVIEW_WEBKITGTK;PkgConfig::WEBVIEW_GTK;dl"
)

# Create imported target core_shared
add_library(core_shared SHARED IMPORTED)

set_target_properties(core_shared PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "WEBVIEW_SHARED"
  INTERFACE_LINK_LIBRARIES "core"
)

# Create imported target core_static
add_library(core_static STATIC IMPORTED)

set_target_properties(core_static PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "WEBVIEW_STATIC"
  INTERFACE_LINK_LIBRARIES "core"
)

# Import target "core_shared" for configuration "Debug"
set_property(TARGET core_shared APPEND PROPERTY IMPORTED_CONFIGURATIONS DEBUG)
set_target_properties(core_shared PROPERTIES
  IMPORTED_LOCATION_DEBUG "/home/yassine-ahmed-ali/Documents/GooeyBuilder/build/core/libwebviewd.so.0.12.0"
  IMPORTED_SONAME_DEBUG "libwebviewd.so.0.12"
  )

# Import target "core_static" for configuration "Debug"
set_property(TARGET core_static APPEND PROPERTY IMPORTED_CONFIGURATIONS DEBUG)
set_target_properties(core_static PROPERTIES
  IMPORTED_LINK_INTERFACE_LANGUAGES_DEBUG "CXX"
  IMPORTED_LOCATION_DEBUG "/home/yassine-ahmed-ali/Documents/GooeyBuilder/build/core/libwebviewd.a"
  )

# This file does not depend on other imported targets which have
# been exported from the same project but in a separate export set.

# Commands beyond this point should not need to know the version.
set(CMAKE_IMPORT_FILE_VERSION)
cmake_policy(POP)
